version: '3.8'

services:
  # Redis for session storage with persistence
  redis:
    image: redis:7-alpine
    container_name: whatsapp_redis_prod
    ports:
      - "127.0.0.1:6379:6379"  # Only bind to localhost
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: always
    networks:
      - whatsapp_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # PostgreSQL for persistent data with proper configuration
  postgres:
    image: postgres:16-alpine
    container_name: whatsapp_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-whatsapp_bot}
      POSTGRES_USER: ${POSTGRES_USER:-botuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is required}
      # Performance tuning
      POSTGRES_INIT_ARGS: "--max_connections=200 --shared_buffers=256MB"
    ports:
      - "127.0.0.1:5432:5432"  # Only bind to localhost
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./backups:/backups  # For backup storage
    restart: always
    networks:
      - whatsapp_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-botuser} -d ${POSTGRES_DB:-whatsapp_bot}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '1'
          memory: 512M

  # WhatsApp Bot Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=production
    image: whatsapp-bot:production
    container_name: whatsapp_bot_prod
    ports:
      - "127.0.0.1:8000:8000"  # Only bind to localhost, use reverse proxy
    environment:
      # Application mode
      ENVIRONMENT: production
      LOG_LEVEL: ${LOG_LEVEL:-info}
      WEB_CONCURRENCY: ${WEB_CONCURRENCY:-4}

      # Database
      REDIS_URL: redis://:${REDIS_PASSWORD:?REDIS_PASSWORD is required}@redis:6379/0
      DATABASE_URL: postgresql://${POSTGRES_USER:-botuser}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-whatsapp_bot}?pool_size=20&max_overflow=40

      # WhatsApp API
      WHATSAPP_TOKEN: ${WHATSAPP_TOKEN:?WHATSAPP_TOKEN is required}
      PHONE_NUMBER_ID: ${PHONE_NUMBER_ID:?PHONE_NUMBER_ID is required}
      BUSINESS_ID: ${BUSINESS_ID:?BUSINESS_ID is required}
      WEBHOOK_VERIFY_TOKEN: ${WEBHOOK_VERIFY_TOKEN:?WEBHOOK_VERIFY_TOKEN is required}
      APP_SECRET: ${APP_SECRET:?APP_SECRET is required}

      # LLM
      OPENAI_API_KEY: ${OPENAI_API_KEY:?OPENAI_API_KEY is required}

      # Bot Config
      BOT_NAME: ${BOT_NAME:-PrinterPix Support Assistant}
      PORT: 8000
      CHROMA_DB_PATH: /app/chroma_db

      # Security
      ALLOWED_IPS: ${ALLOWED_IPS:-}
      ENABLE_WEBHOOK_VERIFICATION: true
    volumes:
      - ./chroma_db:/app/chroma_db:rw
      - ./data:/app/data:ro
      - ./logs:/app/logs:rw
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: always
    networks:
      - whatsapp_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 60s
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "10"
        labels: "service=whatsapp-bot"

  # Nginx reverse proxy (optional, comment out if using external proxy)
  nginx:
    image: nginx:alpine
    container_name: whatsapp_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      - app
    restart: always
    networks:
      - whatsapp_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  nginx_cache:
    driver: local

networks:
  whatsapp_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16