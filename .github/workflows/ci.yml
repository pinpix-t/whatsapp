name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: whatsapp_bot_test
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint with ruff
      run: |
        pip install ruff
        ruff check . --select E,F,W --ignore E501

    - name: Type check with mypy
      continue-on-error: true
      run: |
        pip install mypy types-requests types-redis
        mypy bot/ api/ --ignore-missing-imports

    - name: Security scan with Bandit
      run: |
        pip install bandit[toml]
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -ll  # Show only medium and high severity issues

    - name: Dependency vulnerability scan
      run: |
        pip install safety
        safety check --json || true

    - name: Run tests with pytest
      env:
        REDIS_URL: redis://localhost:6379/0
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/whatsapp_bot_test
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        WHATSAPP_TOKEN: test_token
        PHONE_NUMBER_ID: test_phone_id
        WEBHOOK_VERIFY_TOKEN: test_verify_token
      run: |
        pip install pytest pytest-cov pytest-asyncio
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html || true

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
        retention-days: 30

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/whatsapp-rag-bot:latest
          ${{ secrets.DOCKER_USERNAME }}/whatsapp-rag-bot:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/whatsapp-rag-bot:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/whatsapp-rag-bot:buildcache,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://your-domain.com

    steps:
    - uses: actions/checkout@v3

    - name: Configure SSH
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SSH_HOST: ${{ secrets.SSH_HOST }}
        SSH_USER: ${{ secrets.SSH_USER }}
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts

    - name: Deploy to production server
      env:
        SSH_HOST: ${{ secrets.SSH_HOST }}
        SSH_USER: ${{ secrets.SSH_USER }}
      run: |
        ssh $SSH_USER@$SSH_HOST << 'ENDSSH'
          cd /opt/whatsapp-bot

          # Backup current deployment
          echo "Creating backup..."
          ./scripts/backup_database.sh

          # Pull latest code
          echo "Pulling latest code..."
          git pull origin main

          # Pull latest Docker image
          echo "Pulling Docker image..."
          docker pull ${{ secrets.DOCKER_USERNAME }}/whatsapp-rag-bot:latest

          # Run database migrations if needed
          echo "Running migrations..."
          docker-compose -f docker-compose.production.yml run --rm app python -c "from database.postgres_store import Base, postgres_store; Base.metadata.create_all(postgres_store.engine)" || true

          # Deploy with zero-downtime
          echo "Deploying application..."
          docker-compose -f docker-compose.production.yml up -d --no-deps app

          # Health check
          echo "Waiting for health check..."
          sleep 10
          curl -f http://localhost:8000/health || exit 1

          # Cleanup old images
          echo "Cleaning up..."
          docker image prune -f

          echo "Deployment completed successfully!"
        ENDSSH

    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "Deployment successful"
          # Add notification webhook here (Slack, Discord, etc.)
        else
          echo "Deployment failed"
        fi

    - name: Rollback on failure
      if: failure()
      env:
        SSH_HOST: ${{ secrets.SSH_HOST }}
        SSH_USER: ${{ secrets.SSH_USER }}
      run: |
        ssh $SSH_USER@$SSH_HOST << 'ENDSSH'
          cd /opt/whatsapp-bot
          echo "Rolling back deployment..."
          docker-compose -f docker-compose.production.yml down
          git checkout HEAD~1
          docker-compose -f docker-compose.production.yml up -d
        ENDSSH
